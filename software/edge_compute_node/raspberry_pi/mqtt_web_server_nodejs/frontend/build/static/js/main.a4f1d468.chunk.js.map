{"version":3,"sources":["logo.png","components/LastHeard.js","components/SapflowScatterplot.js","components/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LastHeard","lastHeard","style","margin","Object","keys","length","align","map","id","index","lastHeardWithin60Min","Date","valueOf","key","color","schemeCategory10","title","DateTime","fromISO","toLocaleString","DATETIME_MED_WITH_SECONDS","SapflowScatterplot","sapflowData","frameProps","points","flatMap","datum","pointId","temp","temp1","temp2","responsiveWidth","hoverAnnotation","size","left","bottom","right","top","xAccessor","d","rtcUnixTimestamp","yAccessor","xScaleType","scaleTime","pointStyle","r","fill","indexOf","textAnchor","axes","orient","label","tickFormat","timeFormat","ticks","tooltipContent","className","maxWidth","height","DataTable","overflow","i","j","App","useState","setLastHeard","sapflowState","setSapflowState","websocketOpened","setWebsocketOpened","useEffect","fetch","then","res","json","data","catch","e","console","error","ws","WebSocket","serverIp","onopen","log","onclose","onmessage","event","JSON","parse","type","topic","message","messagePayload","timeReceived","toISOString","prevState","onerror","alt","src","Logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4f1d468.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.68d2b4f9.png\";","import React from 'react';\nimport { DateTime } from 'luxon';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\n\nconst LastHeard = ({ lastHeard = {} }) => (\n  <div style={{ margin: 'auto' }}>\n    <h2>Node Health</h2>\n    {\n      Object.keys(lastHeard).length ?\n        <table align='center'>\n          <thead>\n            <tr>\n              <th>Node ID</th>\n              <th>Last Heard</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              Object.keys(lastHeard)\n                .map((id, index) => {\n                  const lastHeardWithin60Min = (new Date().valueOf() - new Date(lastHeard[id]).valueOf()) < (60 * 60 * 1000) ? true : false;\n                  return (\n                    <tr key={index}>\n                      <td style={{ color: schemeCategory10[index % 10] }}>{id}</td>\n                      <td\n                        title={lastHeardWithin60Min ? 'Last message from this node received within the past hour' : 'Last message > 1 hour ago'}\n                        style={{\n                          color: lastHeardWithin60Min ? 'green' : 'red'\n                        }}\n                      >\n                        {DateTime.fromISO(lastHeard[id]).toLocaleString(DateTime.DATETIME_MED_WITH_SECONDS)}\n                      </td>\n                    </tr>\n                  )\n                })\n            }\n          </tbody>\n        </table>\n        : <p>Waiting for data...</p>\n    }\n\n  </div>\n)\n\nexport default LastHeard;","import React from 'react';\nimport ResponsiveXYFrame from 'semiotic/lib/ResponsiveXYFrame';\nimport { schemeCategory10 } from 'd3-scale-chromatic';\nimport { scaleTime } from 'd3-scale';\nimport { timeFormat } from 'd3-time-format';\nimport './SapflowScatterplot.css';\n\nconst SapflowScatterplot = ({ sapflowData = [], lastHeard = {} }) => {\n  const frameData = sapflowData.flatMap(datum => [{ ...datum, pointId: `${datum.id}-temp1`, temp: datum.temp1 }, { ...datum, pointId: `${datum.id}-temp2`, temp: datum.temp2 }]);\n\n  const frameProps = {\n    points: frameData,\n    responsiveWidth: true,\n    hoverAnnotation: true,\n    size: [700, 400],\n    margin: { left: 60, bottom: 90, right: 10, top: 40 },\n    xAccessor: d => new Date(d.rtcUnixTimestamp),\n    yAccessor: 'temp',\n    xScaleType: scaleTime(),\n    pointStyle: d => {\n      return {\n        r: 5,\n        fill: schemeCategory10[Object.keys(lastHeard).indexOf(d.id) % 10]\n      };\n    },\n    title: (\n      <text textAnchor=\"middle\">\n        Sapflow Raw Datapoints\n      </text>\n    ),\n    axes: [\n      { orient: \"left\", label: \"Temperature (C)\" },\n      { orient: \"bottom\", label: \"Time\", tickFormat: timeFormat(\"%I:%M:%S %p\"), ticks: 4 }\n    ],\n    tooltipContent: d => (\n      (\n        <div className=\"tooltip-content\">\n          <p>Time: {timeFormat(\"%I:%M:%S %p\")(new Date(d.rtcUnixTimestamp))}</p>\n          <p>Temperature (C): {d.temp}</p>\n          <p>Node: {d.pointId}</p>\n        </div>\n      )\n    )\n  }\n\n  return (\n    <div style={{ maxWidth: '1000px', margin: 'auto' }}>\n      <h2>Dashboard</h2>\n      {\n        sapflowData.length ?\n          <ResponsiveXYFrame {...frameProps} />\n          : <p style={{ height: '400px' }}>Waiting for data...</p>\n      }\n    </div>\n  )\n}\n\nexport default SapflowScatterplot;","import React from 'react';\n\nconst DataTable = ({ sapflowData }) => (\n  <div>\n    <h2>Raw Data</h2>\n    {\n      sapflowData.length ?\n        <div style={{ overflow: 'scroll' }}>\n          <table align='center'>\n            <thead>\n              <tr>\n                {\n                  Object.keys(sapflowData[0]).map((key, i) =>\n                    <th key={`header-${i}`}>{key}</th>\n                  )\n                }\n              </tr>\n            </thead>\n            <tbody>\n              {\n                sapflowData.map((datum, i) =>\n                  <tr key={`row-${i}`}>\n                    {\n                      Object.keys(datum).map((key, j) =>\n                        <td key={`cell-${i}-${j}`}>{datum[key]}</td>\n                      )\n                    }\n                  </tr>\n                )\n              }\n            </tbody>\n          </table>\n        </div>\n        : <p>Waiting for data...</p>\n    }\n  </div>\n)\n\nexport default DataTable;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport LastHeard from './components/LastHeard';\nimport SapflowScatterplot from './components/SapflowScatterplot';\nimport DataTable from './components/DataTable';\nimport Logo from './logo.png';\n\nfunction App() {\n  const [lastHeard, setLastHeard] = useState({});\n  const [sapflowState, setSapflowState] = useState([]);\n  const [websocketOpened, setWebsocketOpened] = useState(false);\n\n  useEffect(() => {\n    fetch('/lastHeard')\n      .then(res => res.json())\n      .then(data => {\n        setLastHeard(data.lastHeard);\n      })\n      .catch(e => {\n        console.error('Could not fetch lastHeard route from server due to error: ', e)\n      });\n  }, []);\n\n  useEffect(() => {\n    fetch('/serverIp')\n      .then(res => res.json())\n      .then(data => {\n        const ws = new WebSocket(`ws://${data.serverIp || 'localhost'}:8080`); // TODO: resolve IP address automatically somehow\n        ws.onopen = () => {\n          console.log('Websocket connection opened');\n          setWebsocketOpened(true);\n        };\n\n        ws.onclose = () => {\n          console.log('Websocket connection closed');\n        };\n\n        ws.onmessage = (event) => {\n          const data = JSON.parse(event.data);\n\n          switch (data.type) {\n            case 'mqtt': {\n              const { topic } = data;\n              if (topic === 'sapflow') {\n                const { message } = data;\n                const messagePayload = JSON.parse(message);\n                const { id } = messagePayload;\n                const timeReceived = new Date().toISOString();\n\n                setLastHeard((prevState) => {\n                  return {\n                    ...prevState,\n                    [id]: timeReceived\n                  };\n                });\n\n                setSapflowState((prevState) => {\n                  return [...prevState, { ...messagePayload, timeReceived }];\n                });\n              }\n              break;\n            }\n\n            case 'wsHeartbeat': {\n              break;\n            }\n\n            default:\n              console.error(`Unhandled data type received from websocket: ${data.type}`);\n          }\n        };\n\n        ws.onerror = (event) => {\n          console.error(\"WebSocket error observed:\", event);\n        };\n      })\n      .catch(e => {\n        console.error('Could not fetch lastHeard route from server due to error: ', e)\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Sapflow Status</h1>\n      </header>\n      <div className='dashboard-container'>\n        {\n          websocketOpened\n            ? <p style={{ color: 'green' }}>Websocket connection opened.</p>\n            : <p style={{ color: 'red' }}>Websocket failed to connect. Refresh to try again.</p>\n        }\n        <SapflowScatterplot lastHeard={lastHeard} sapflowData={sapflowState} />\n        <LastHeard lastHeard={lastHeard} />\n        <DataTable sapflowData={sapflowState} />\n        <img style={{ maxWidth: '100px' }} alt='Dotmote Labs logo' src={Logo}></img>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}